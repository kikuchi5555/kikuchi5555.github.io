{"version":3,"sources":["github_icon.svg","Animation.jsx","App.jsx","serviceWorker.ts","index.jsx"],"names":["module","exports","colors","random","i","r","Math","position","color","round","length","scale","rotation","THREE","degToRad","data","Array","fill","map","args","Content","useSprings","from","config","mass","tension","friction","springs","set","useEffect","setInterval","delay","d","index","mesh","key","castShadow","receiveShadow","attach","meshStandardMaterial","roughness","metalness","Lights","intensity","angle","PI","penumbra","shadow-mapSize-width","shadow-mapSize-height","Animation","shadowMap","camera","fov","EnterText","props","characterList","children","split","useState","text","setText","refText","useRef","current","interval","clearInterval","App","className","href","target","rel","src","GitHubIcon","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fcb9a442.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_icon.35aa1b9f.svg\";","import * as THREE from 'three'\nimport React, { useEffect } from 'react'\nimport { Canvas } from 'react-three-fiber'\nimport { useSprings, a } from 'react-spring/three'\n\nconst number = 35\nconst colors = ['#9a9a9a', '#cccccc', '#aaaaaa', '#bcbcbc', 'dddddd', 'ababab']\nconst random = i => {\n  const r = Math.random()\n  return {\n    position: [100 - Math.random() * 200, 100 - Math.random() * 200, i * 1.5],\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    scale: [1 + r * 14, 1 + r * 14, 1],\n    rotation: [0, 0, THREE.Math.degToRad(Math.round(Math.random()) * 45)]\n  }\n}\n\nconst data = new Array(number).fill().map(() => {\n  return {\n    color: colors[Math.round(Math.random() * (colors.length - 1))],\n    args: [0.1 + Math.random() * 9, 0.1 + Math.random() * 9, 10]\n  }\n})\n\nfunction Content() {\n  const [springs, set] = useSprings(number, i => ({\n    from: random(i),\n    ...random(i),\n    config: { mass: 20, tension: 150, friction: 50 }\n  }))\n  // eslint-disable-next-line\n  useEffect(() => void setInterval(() => set(i => ({ ...random(i), delay: i * 40 })), 3000), [])\n  return data.map((d, index) => (\n    <a.mesh key={index} {...springs[index]} castShadow receiveShadow>\n      <boxBufferGeometry attach=\"geometry\" args={d.args} />\n      <a.meshStandardMaterial attach=\"material\" color={springs[index].color} roughness={0.75} metalness={0.5} />\n    </a.mesh>\n  ))\n}\n\nfunction Lights() {\n  return (\n    <group>\n      <pointLight intensity={0.3} />\n      <ambientLight intensity={2} />\n      <spotLight\n        castShadow\n        intensity={0.2}\n        angle={Math.PI / 7}\n        position={[150, 150, 250]}\n        penumbra={1}\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n      />\n    </group>\n  )\n}\n\nexport default function Animation() {\n  return (\n    <Canvas shadowMap camera={{ position: [0, 0, 100], fov: 100 }}>\n      <Lights />\n      <Content />\n    </Canvas>\n  )\n}\n","import React, { useRef, useState, useEffect } from 'react';\nimport GitHubIcon from './github_icon.svg';\nimport './App.scss';\nimport Animation from './Animation'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"detail\">\n        <h1 className=\"detail__heading\"><EnterText>Kikuchi Tetsuro</EnterText></h1>\n        <p className=\"detail__text\"><EnterText>Front-end Development</EnterText><br/><EnterText>Web Design</EnterText></p>\n        <a className=\"logo\" href=\"https://github.com/kikuchi5555\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={GitHubIcon} alt=\"logo\" />\n        </a>\n      </div>\n      <div className=\"skill\">\n        <ul className=\"skill__list\">\n          <li className=\"skill__item\"><EnterText>HTML （pug / slim / ejs）</EnterText></li>\n          <li className=\"skill__item\"><EnterText>CSS (Sass / SCSS / Stylus)</EnterText></li>\n          <li className=\"skill__item\"><EnterText>JavaScript (ES6 or later)</EnterText></li>\n          <li className=\"skill__item\"><EnterText>jQuery</EnterText></li>\n          <li className=\"skill__item\"><EnterText>TypeScript</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Vue.js</EnterText></li>\n          <li className=\"skill__item\"><EnterText>React</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Angular.js</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Ruby on Rails</EnterText></li>\n        </ul>\n      </div>\n      <Animation></Animation>\n    </div>\n  );\n}\n\nfunction EnterText(props) {\n  const characterList = props.children.split('')\n\n  const [text, setText] = useState('');\n  const refText = useRef(text);\n\n  useEffect(() => {\n    refText.current = text;\n  }, [text]);\n\n  useEffect(() => {\n    let i = 0\n    const interval = setInterval(() => {\n      setText(refText.current + characterList[i])\n      i++\n      if (i > characterList.length - 1) {\n        clearInterval(interval);\n      }\n    }, 50);\n  // eslint-disable-next-line\n  }, []);\n\n  return (\n    <span>{text}</span>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}