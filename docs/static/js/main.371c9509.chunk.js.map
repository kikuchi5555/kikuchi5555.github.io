{"version":3,"sources":["github_icon.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","EnterText","props","characterList","children","split","useState","text","setText","refText","useRef","useEffect","current","i","interval","setInterval","length","clearInterval","Box","mesh","hovered","setHover","active","setActive","useFrame","rotation","x","y","ref","scale","onClick","e","onPointerOver","onPointerOut","attach","args","color","App","className","href","target","rel","src","GitHubIcon","alt","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,yC,0MCwC3C,SAASC,EAAUC,GACjB,IAAMC,EAAgBD,EAAME,SAASC,MAAM,IADd,EAGLC,mBAAS,IAHJ,mBAGtBC,EAHsB,KAGhBC,EAHgB,KAIvBC,EAAUC,iBAAOH,GAiBvB,OAfAI,qBAAU,WACRF,EAAQG,QAAUL,IACjB,CAACA,IAEJI,qBAAU,WACR,IAAIE,EAAI,EACFC,EAAWC,aAAY,WAC3BP,EAAQC,EAAQG,QAAUT,EAAcU,MACxCA,EACQV,EAAca,OAAS,GAC7BC,cAAcH,KAEf,MACF,IAGD,8BAAOP,GAIX,SAASW,EAAIhB,GAEX,IAAMiB,EAAOT,iBAAO,MAFG,EAKKJ,oBAAS,GALd,mBAKhBc,EALgB,KAKPC,EALO,OAMKf,oBAAS,GANd,mBAMhBgB,EANgB,KAMRC,EANQ,KAcvB,OALAC,aAAS,WACP,IAAMZ,EAAUO,EAAKP,QACrB,OAAQA,EAAQa,SAASC,EAAId,EAAQa,SAASE,GAAK,OAInD,0CACMzB,EADN,CAEE0B,IAAKT,EACLU,MAAOP,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCQ,QAAS,SAACC,GAAD,OAAOR,GAAWD,IAC3BU,cAAe,SAACD,GAAD,OAAOV,GAAS,IAC/BY,aAAc,SAACF,GAAD,OAAOV,GAAS,MAC9B,uCAAmBa,OAAO,WAAWC,KAAM,CAAC,EAAG,EAAG,KAClD,0CAAsBD,OAAO,WAAWE,MAAOhB,EAAU,UAAY,YAK5DiB,MAzFf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,mBAAkB,kBAACrC,EAAD,yBAChC,uBAAGqC,UAAU,gBAAe,kBAACrC,EAAD,8BAA4C,6BAAK,kBAACA,EAAD,oBAC7E,uBAAGqC,UAAU,OAAOC,KAAK,iCAAiCC,OAAO,SAASC,IAAI,uBAC5E,yBAAKC,IAAKC,IAAYC,IAAI,WAG9B,yBAAKN,UAAU,SACb,wBAAIA,UAAU,eACZ,wBAAIA,UAAU,eAAc,kBAACrC,EAAD,2CAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,oCAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,mCAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,gBAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,oBAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,gBAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,eAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,oBAC5B,wBAAIqC,UAAU,eAAc,kBAACrC,EAAD,yBAGhC,6BACA,kBAAC,IAAD,KACE,uCACA,gCAAY4C,SAAU,CAAC,GAAI,GAAI,MAC/B,kBAAC3B,EAAD,CAAK2B,SAAU,EAAE,IAAK,EAAG,KACzB,kBAAC3B,EAAD,CAAK2B,SAAU,CAAC,IAAK,EAAG,SCrBZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.371c9509.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_icon.35aa1b9f.svg\";","import React, { useRef, useState, useEffect } from 'react';\nimport GitHubIcon from './github_icon.svg';\nimport './App.scss';\nimport { Canvas, useFrame } from 'react-three-fiber'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"detail\">\n        <h1 className=\"detail__heading\"><EnterText>Kikuchi Tetsuro</EnterText></h1>\n        <p className=\"detail__text\"><EnterText>Front-end Development</EnterText><br/><EnterText>Web Design</EnterText></p>\n        <a className=\"logo\" href=\"https://github.com/kikuchi5555\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <img src={GitHubIcon} alt=\"logo\" />\n        </a>\n      </div>\n      <div className=\"skill\">\n        <ul className=\"skill__list\">\n          <li className=\"skill__item\"><EnterText>HTML （pug / slim / ejs）</EnterText></li>\n          <li className=\"skill__item\"><EnterText>CSS (Sass / SCSS / Stylus)</EnterText></li>\n          <li className=\"skill__item\"><EnterText>JavaScript (ES6 or later)</EnterText></li>\n          <li className=\"skill__item\"><EnterText>jQuery</EnterText></li>\n          <li className=\"skill__item\"><EnterText>TypeScript</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Vue.js</EnterText></li>\n          <li className=\"skill__item\"><EnterText>React</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Angular.js</EnterText></li>\n          <li className=\"skill__item\"><EnterText>Ruby on Rails</EnterText></li>\n        </ul>\n      </div>\n      <div>\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <Box position={[-1.2, 0, 0]} />\n        <Box position={[1.2, 0, 0]} />\n      </Canvas>\n      </div>\n    </div>\n  );\n}\n\nfunction EnterText(props: any) {\n  const characterList = props.children.split('')\n\n  const [text, setText] = useState('');\n  const refText = useRef(text);\n\n  useEffect(() => {\n    refText.current = text;\n  }, [text]);\n\n  useEffect(() => {\n    let i = 0\n    const interval = setInterval(() => {\n      setText(refText.current + characterList[i])\n      i++\n      if (i > characterList.length - 1) {\n        clearInterval(interval);\n      }\n    }, 20);\n  }, []);\n\n  return (\n    <span>{text}</span>\n  )\n}\n\nfunction Box(props: any) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(null)\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    const current = mesh.current as any\n    return (current.rotation.x = current.rotation.y += 0.01)\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(e) => setActive(!active)}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}>\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial attach=\"material\" color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}